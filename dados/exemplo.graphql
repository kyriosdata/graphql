"""
Um **ser humano** que não necessariamente é um usuário.
"""
type Pessoa {
  id: ID!

  """
  O _nome_ atribuído à pessoa.
  """
  nome: String
}

type Farol {
  id: ID!
  title: String
  nome: String
}

type FarolConnection {
  items: [Farol]
  nextToken: String
}

"""
O usuário do sistema na perspectiva de autenticação e autorização.
"""
type Usuario {
  id: ID!
  title: String!
  content: String!
  price: Int
  rating: Float
}

type UsuarioConnection {
  items: [Usuario]
  nextToken: String
}

type Query {
  """
  Recupera uma pessoa
  """
  pessoa(id: ID!): Pessoa
  getFarol(id: ID!): Farol
  listFarols(
    filter: TableFarolFilterInput
    limit: Int
    nextToken: String
  ): FarolConnection
  getUsuario(id: ID!): Usuario
  listUsuarios(
    filter: TableUsuarioFilterInput
    limit: Int
    nextToken: String
  ): UsuarioConnection
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input TableFarolFilterInput {
  id: TableIDFilterInput
  title: TableStringFilterInput
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input TableUsuarioFilterInput {
  id: TableIDFilterInput
  title: TableStringFilterInput
  content: TableStringFilterInput
  price: TableIntFilterInput
  rating: TableFloatFilterInput
}
